package ch.bbw.zork;import java.sql.SQLOutput;import java.util.*;public class Game {	private int totalpoints;	private Player player;	private Parser parser;	private Room outside, waiting_room, laboratory, hall, patient_room, balcony, operation_room, currentRoom;	private Item fist;	private Enemy zombie, fat_zombie, nurse, doctor;	private static final Random random = new Random();	private Stack<Room> roomHistory;	public Game() {		parser = new Parser(System.in);		fist = new Item("Fist", "Your own fist", 1.0, 100, 0.5, null, 0, true);		Item[] Inventory = {fist};		roomHistory = new Stack<>();		roomHistory.push(currentRoom);		outside = new Room("outside the ruined Hospital", 0, spawnEnemies());		waiting_room = new Room("the waiting room. Something tells you not to stay too long...", 1, spawnEnemies());		balcony = new Room("the balcony. you can see the city in ruins", 2, spawnEnemies());		laboratory = new Room("laboratory, a room where research is done to patients", 3, spawnEnemies());		hall = new Room("the hall. This hall is very long...", 4, spawnEnemies());		patient_room = new Room("patient room... it gives you chills", 5, spawnEnemies());		operation_room = new Room("Last room in this floor...", 6, spawnEnemies());		outside.setExits(null, waiting_room, null, null);		waiting_room.setExits(null, balcony, null, outside);		balcony.setExits(null, null, null, waiting_room);		laboratory.setExits(null, hall, operation_room, null);		hall.setExits(waiting_room, null, patient_room, laboratory);		patient_room.setExits(hall, null, null, null);		operation_room.setExits(laboratory, null, null, null);		currentRoom = outside ;		roomHistory.push(currentRoom);		player = new Player(100, "PlayerName", currentRoom.getRoomId(), currentRoom.getRoomId(), Inventory,0);	}	public void play() {		printWelcome();		boolean finished = false;		while (!finished) {			Command command = parser.getCommand();			finished = processCommand(command);		}		System.out.println("Thank you for playing.  Good bye.");	}	private void printWelcome() {		System.out.println();		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");		System.out.println("In this cold, cold world, where the ");		System.out.println("Apocalypse came true, everything is trying");		System.out.println("to kill you... You wandered alone ");		System.out.println("into an abandoned Hospital.");		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");		System.out.println();		System.out.println(currentRoom.longDescription());		 printenemies();	}	public void printenemies(){		Enemy[] enemies = currentRoom.getEnemies();		if (enemies != null && enemies.length > 0) {			System.out.println("You see the following enemies in the room:");			System.out.println();			for (int i = 0; i < enemies.length; i++) {				System.out.println((i + 1) + ". " + enemies[i].getDescription());			}			System.out.println();		} else {			System.out.println("There are no enemies in the room.");		}	}	private boolean processCommand(Command command) {		if (command.isUnknown()) {			System.out.println("I don't know what you mean...");			return false;		}		String commandWord = command.getCommandWord();		switch (commandWord) {			case "info":				printinfo();				break;			case "win":				System.out.println();				System.out.println();				System.out.println("wow you won!");				System.out.println();				System.out.println();				return true;			case "say":				System.out.println(command.getSecondWord());				break;			case "use":				if (command.hasSecondWord()) {					try {						int itemIndex = Integer.parseInt(command.getSecondWord()) - 1;						Item itemToUse = player.findItemByIndex(itemIndex);						if (itemToUse != null) {							selectItem(itemToUse);							System.out.println("You selected the " + itemToUse.getName() + "!");						} else {							System.out.println("You can't find that item in your inventory.");						}					} catch (NumberFormatException e) {						System.out.println("Invalid item index. Use 'use' followed by the item number.");					}				} else {					System.out.println("Use what? Specify the item number.");				}				break;			case "get":				generateRandomItem();				break;			case "go":				goRoom(command);				break;			case "inv":				printInventory();				break;			case "back":				goBack();				break;			case "map":				printMap(currentRoom.getRoomId());				break;			case "search":				searchRoom();				break;			case "fight":				if (command.hasSecondWord()) {					String enemyNumber = command.getSecondWord();					if (isNumeric(enemyNumber)) {						int enemyIndex = Integer.parseInt(enemyNumber) - 1;						Enemy[] enemies = currentRoom.getEnemies();						if (enemyIndex >= 0 && enemyIndex < enemies.length) {							fightEnemy(enemies[enemyIndex]);						} else {							System.out.println("Invalid enemy number. Please specify a valid enemy number.");						}					} else {						System.out.println("Invalid enemy number. Please specify a valid enemy number.");					}				} else {					System.out.println("Fight which enemy? Specify the enemy number.");				}				break;			case "drop":				if (command.hasSecondWord()) {					String indexOrName = command.getSecondWord();					if (isNumeric(indexOrName)) {						int index = Integer.parseInt(indexOrName) - 1;						if (index >= 0 && index < player.getInventory().length) {							Item itemToDrop = player.findItemByIndex(index);							player.removeFromInventory(itemToDrop);							System.out.println("You dropped the " + itemToDrop.getName());						} else {							System.out.println("Invalid item index. Check your inventory and try again.");						}					} else {						Item itemToDrop = player.findItemByName(indexOrName);						if (itemToDrop != null) {							player.removeFromInventory(itemToDrop);							System.out.println("You dropped the " + itemToDrop.getName());						} else {							System.out.println("You don't have an item with that name in your inventory.");						}					}				} else {					System.out.println("Drop what? Specify the item number or name.");				}				break;			case "quit":				if (command.hasSecondWord()) {					System.out.println("Quit what?");				} else {					return true;				}				break;		}		return false;	}	private void printinfo() {		System.out.println();		System.out.println("Your command words are:");		System.out.println(parser.showCommands());		System.out.println("You have " + player.getHp() + "HP");		System.out.println(getCurrentWeaponInfo());		System.out.println();		printenemies();		System.out.println("Good luck, soldier");	}	private void printInventory() {		List<Item> playerInventory = List.of(player.getInventory());		if (!playerInventory.isEmpty()) {			System.out.println("You look through your inventory.");			System.out.println();			System.out.println("Inside you have:");			for (Item item : playerInventory) {				String star = item.isHasStar() ? "â˜…" : "";				System.out.println(star + " " + item.getName());			}		} else {			System.out.println("Your inventory is empty.");		}	}	public void fightEnemy(Enemy enemy) {		int enemyPoints = 0;		if (enemy.getName().equals("Zombie")) {			enemyPoints = 5;		} else if (enemy.getName().equals("Fat Zombie")) {			enemyPoints = 7;		} else if (enemy.getName().equals("Nurse")) {			enemyPoints = 10;		} else if (enemy.getName().equals("Doctor")) {			enemyPoints = 12;		}		int playerDamage = getCurrentWeaponDamage();		while (player.getHp() > 0 && enemy.getHealth() > 0) {			int enemyDamage = enemy.getDamage();			enemy.takeDamage(playerDamage);			player.takeDamage(enemyDamage);			System.out.println();			System.out.println("You attack the " + enemy.getName() + " and deal " + playerDamage + " damage.");			System.out.println("The " + enemy.getName() + " attacks you and deals " + enemyDamage + " damage.");			System.out.println();			System.out.println("Your health: " + player.getHp() + " HP");			System.out.println(enemy.getName() + " health: " + enemy.getHealth() + " HP");		}		if (player.getHp() <= 0) {			System.out.println();			System.out.println();			System.out.println();			System.out.println("You have been defeated. Game over.");			System.out.println();			player.setScore(player.getScore()+player.getInventory().length);			System.out.println("YOU SCORED: " + player.getScore());			System.out.println();			System.out.println("calculations for score:");			System.out.println("POINTS FOR KILLED ENEMIES: 		"+ totalpoints);			System.out.println("POINTS FOR AMOUNT OF ITEMS:		"+ player.getInventory().length);			System.out.println("---------------------------------------------------------------");			System.out.println("TOTAL POINTS:					"+player.getScore());		} else {			player.setScore(totalpoints + enemyPoints);			System.out.println("You defeated the " + enemy.getName() + " and earned " + enemyPoints + " points!");			player.setHp(player.getHp() + enemyPoints);			System.out.println("You also healed up " + enemyPoints + "HP!");			currentRoom.removeEnemy(enemy);			System.out.println();			generateRandomItem(); 			System.out.println();			printenemies();		}	}	public void goRoom(Command command) {		if (!command.hasSecondWord()) {			System.out.println("Go where?");		} else {			String direction = command.getSecondWord();			Room nextRoom = currentRoom.nextRoom(direction);			if (nextRoom == null)				System.out.println("There is no door that way!");			else {				roomHistory.push(currentRoom);				currentRoom = nextRoom;				System.out.println(currentRoom.longDescription());				currentRoom.setEnemies(spawnEnemies());				printenemies(); 			}		}	}	public void printMap(int roomID) {		System.out.println("+--------------+        +--------------+        +--------------+");		System.out.println("|              |        |              |        |              |");		System.out.println("|   Outside    |--------| Waiting room |--------|    Balcony   |");		System.out.println("|              |        |              |        |              |");		System.out.println("+--------------+        +--------------+        +--------------+");		System.out.println("                               |");		System.out.println("                               |");		System.out.println("+--------------+        +--------------+");		System.out.println("|              |        |              |");		System.out.println("|  Laboratory  |--------|     Hall     |");		System.out.println("|              |        |              |");		System.out.println("+--------------+        +--------------+");		System.out.println("       |                       |");		System.out.println("       |                       |");		System.out.println("+--------------+        +--------------+");		System.out.println("|              |        |              |");		System.out.println("|Operation room|        | Patient room |");		System.out.println("|              |        |              |");		System.out.println("+--------------+        +--------------+");		String wherePlayerIs;		switch (roomID) {			case 0:				wherePlayerIs = "Outside.";				break;			case 1:				wherePlayerIs = "in the Waiting room.";				break;			case 2:				wherePlayerIs = "on the Balcony.";				break;			case 3:				wherePlayerIs = "in the Laboratory.";				break;			case 4:				wherePlayerIs = "in the Hall.";				break;			case 5:				wherePlayerIs = "in the Operation room.";				break;			case 6:				wherePlayerIs = "in the Patients room.";				break;			default:				throw new IllegalStateException("Unexpected value: " + roomID);		}		System.out.println("You are currently " + wherePlayerIs);	}	public void generateRandomItem() {		String[] itemNames = {"Needle", "Scalpel", "Syringe", "Stethoscope", "Tweezer", "Forceps", "Medical Hammer", "Blood Pressure Cuff", "Thermometer"};		String name = itemNames[random.nextInt(itemNames.length)];		String description = "Description of " + name;		int damage = random.nextInt(7) + 3;		int durability = random.nextInt(10) + 1;		double weight = random.nextDouble() * 2;		String[] perks = null;		int hp = random.nextInt(10) + 1;		Item randomItem = new Item(name, description, damage, durability, weight, perks, hp, false);		player.addToInventory(randomItem);		System.out.println("You found a " + name + "!");	}	public void selectItem(Item item2Bselected) {		removeStarsFromAllItems();		item2Bselected.setHasStar(true);	}	public void removeStarsFromAllItems() {		for (Item item : player.getInventory()) {			if (item.isHasStar()) {				item.setHasStar(false);			}		}	}	public void searchRoom() {		if (currentRoom.isSearched()) {			System.out.println("Dieser Raum wurde schon gesucht.");		} else {			currentRoom.setSearched(true);			generateRandomItem();		}	}	public boolean isNumeric(String str) {		try {			Double.parseDouble(str);			return true;		} catch (NumberFormatException e) {			return false;		}	}	public void goBack() {		if (roomHistory.size() >= 2) {			roomHistory.pop(); 			currentRoom = roomHistory.peek(); 			System.out.println("You go back to the previous room.");			System.out.println(currentRoom.longDescription());		} else if (roomHistory.size() == 1) {			System.out.println("You can't go back further. You are already at the starting room.");		} else {			System.out.println("There's nowhere to go back to. You haven't visited any rooms yet.");		}	}	public Enemy[] spawnEnemies() {		int numEnemies = random.nextInt(3) + 1; 		Enemy[] enemies = new Enemy[numEnemies];		for (int i = 0; i < numEnemies; i++) {			String[] enemyNames = {"Zombie", "Fat Zombie", "Nurse", "Doctor"};			String name = enemyNames[random.nextInt(enemyNames.length)];			String description;			int damage;			int health;			boolean isBoss = false;			switch (name) {				case "Zombie":					description = "A slow-moving, reanimated corpse. It looks like it's hungry for your brains.";					damage = 1;  					health = 10;  					isBoss = false;					break;				case "Fat Zombie":					description = "A slower, more resilient zombie. It has a menacing appearance.";					damage = 2;  					health = 15;  					isBoss = false;					break;				case "Nurse":					description = "An infected nurse in tattered scrubs. Her eyes are bloodshot, and she's carrying a syringe.";					damage = 4;  					health = 15;  					isBoss = false;					break;				case "Doctor":					description = "A crazed doctor with a bloodied lab coat. He's wielding a sharp scalpel.";					damage = 12;  					health = 12;  					isBoss = true;					break;				default:					description = "A generic enemy.";					damage = 10;					health = 50;			}			enemies[i] = new Enemy(name, damage, health, isBoss, description);		}		return enemies;	}	public int getCurrentWeaponDamage() {		for (Item item : player.getInventory()) {			if (item.isHasStar()) {				return (int) item.getDamage();			}		}		return (int) fist.getDamage();	}	public String getCurrentWeaponInfo() {		for (Item item : player.getInventory()) {			if (item.isHasStar()) {				return "You are using a " + item.getDescription() + ", which does " + item.getDamage() + " Damage and has " + item.getDurability() + " Durability.";			}		}		return "You are currently unarmed.";	}}